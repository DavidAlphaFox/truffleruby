slow:Process.exec raises Errno::ENOENT for an empty string
slow:Process.exec raises Errno::ENOENT for a command which does not exist
slow:Process.exec raises an ArgumentError if the command includes a null byte
slow:Process.exec raises Errno::EACCES when the file does not have execute permissions
slow:Process.exec raises Errno::EACCES when passed a directory
slow:Process.exec runs the specified command, replacing current process
slow:Process.exec sets the current directory when given the :chdir option
slow:Process.exec flushes STDOUT upon exit when it's not set to sync
slow:Process.exec flushes STDERR upon exit when it's not set to sync
slow:Process.exec with a single argument subjects the specified command to shell expansion
slow:Process.exec with a single argument creates an argument array with shell parsing semantics for whitespace
slow:Process.exec with multiple arguments does not subject the arguments to shell expansion
slow:Process.exec (environment variables) sets environment variables in the child environment
slow:Process.exec (environment variables) unsets environment variables whose value is nil
slow:Process.exec (environment variables) coerces environment argument using to_hash
slow:Process.exec (environment variables) unsets other environment variables when given a true :unsetenv_others option
slow:Process.exec with a command array uses the first element as the command name and the second as the argv[0] value
slow:Process.exec with a command array coerces the argument using to_ary
slow:Process.exec with a command array raises an ArgumentError if the Array does not have exactly two elements
slow:Process.exec with an options Hash with Integer option keys lets the process after exec have specified file descriptor despite close_on_exec
slow:Process.exec with an options Hash with Integer option keys sets close_on_exec to false on specified fd even when it fails
slow:Process.exec with an options Hash with Integer option keys maps the key to a file descriptor in the child that inherits the file descriptor from the parent specified by the value
execve:Process.exec raises Errno::ENOENT for an empty string
execve:Process.exec raises Errno::ENOENT for a command which does not exist
execve:Process.exec raises an ArgumentError if the command includes a null byte
execve:Process.exec raises Errno::EACCES when the file does not have execute permissions
execve:Process.exec raises Errno::EACCES or Errno::ENOEXEC when the file is not an executable file
execve:Process.exec raises Errno::EACCES when passed a directory
execve:Process.exec runs the specified command, replacing current process
execve:Process.exec sets the current directory when given the :chdir option
execve:Process.exec flushes STDOUT upon exit when it's not set to sync
execve:Process.exec flushes STDERR upon exit when it's not set to sync
execve:Process.exec with a single argument subjects the specified command to shell expansion
execve:Process.exec with a single argument creates an argument array with shell parsing semantics for whitespace
execve:Process.exec with a single argument does not subject the specified command to shell expansion on Windows
execve:Process.exec with a single argument does not create an argument array with shell parsing semantics for whitespace on Windows
execve:Process.exec with multiple arguments does not subject the arguments to shell expansion
execve:Process.exec (environment variables) sets environment variables in the child environment
execve:Process.exec (environment variables) unsets environment variables whose value is nil
execve:Process.exec (environment variables) coerces environment argument using to_hash
execve:Process.exec (environment variables) unsets other environment variables when given a true :unsetenv_others option
execve:Process.exec with a command array uses the first element as the command name and the second as the argv[0] value
execve:Process.exec with a command array coerces the argument using to_ary
execve:Process.exec with a command array raises an ArgumentError if the Array does not have exactly two elements
execve:Process.exec with an options Hash with Integer option keys maps the key to a file descriptor in the child that inherits the file descriptor from the parent specified by the value
execve:Process.exec with an options Hash with Integer option keys lets the process after exec have specified file descriptor despite close_on_exec
execve:Process.exec with an options Hash with Integer option keys sets close_on_exec to false on specified fd even when it fails
