fails:Parsing a For operator (multi-assignment / with multiple variables (for a, b, c in [])) case is parsed correctly
fails:Parsing a For operator (multi-assignment / with nested multi assignment (for a, (b, c) in [])) case is parsed correctly
fails:Parsing a For operator (multi-assignment / with preceding variables, splat operator and following variables (for a, *b, c in [])) case is parsed correctly
fails:Parsing a For operator (multi-assignment / with preceding variables and implicit rest (for a, in [])) case is parsed correctly
fails:Parsing a For operator (multi-assignment / with preceding variables and splat operator (for a, b, *c in [])) case is parsed correctly
fails:Parsing a For operator (multi-assignment / with splat operator and following variables (for *a, b, c in [])) case is parsed correctly
fails:Parsing a For operator (with attribute assignment (for a.b in [])) case is parsed correctly
fails:Parsing a For operator (with class variable (for @@a in [])) case is parsed correctly
fails:Parsing a For operator (with constant (for A in [])) case is parsed correctly
fails:Parsing a For operator (with fully qualified constant (for A in [])) case is parsed correctly
fails:Parsing a For operator (with global variable (for $a in [])) case is parsed correctly
fails:Parsing a For operator (with instance variable (for @a in [])) case is parsed correctly
fails:Parsing a For operator (with local variable (for a in [])) case is parsed correctly
fails:Parsing a For operator (with reference assignment (for a[b] in [])) case is parsed correctly
fails:Parsing a For operator (with reference assignment and multiple explicit arguments (for a[b, c] in [])) case is parsed correctly

# Not supported yet by Prism
# See https://github.com/ruby/prism/issues/1997
fails:Parsing a Regexp (encoding / when there are non-ASCII characters in a literal) case is parsed correctly
fails:Parsing a Regexp (encoding in boolean context / when there are non-ASCII characters in a literal) case is parsed correctly
