subject: "&&="
description: "Variable assignment/constant (A &&= b)"
notes: >
  `A &&= b` is translated into `A && A = b`
focused_on_node: "org.truffleruby.language.defined.DefinedWrapperNode"
ruby: |
  FOO &&= 42
ast: |
  DefinedWrapperNode
      attributes:
          definition = assignment
          flags = 1
          sourceCharIndex = 0
          sourceLength = 10
      children:
          child =
              AndNodeGen
                  attributes:
                      flags = 0
                      sourceCharIndex = -1
                      sourceLength = 0
                  children:
                      left =
                          ReadConstantWithLexicalScopeNode
                              attributes:
                                  flags = 0
                                  lexicalScope =  :: Object
                                  name = "FOO"
                                  sourceCharIndex = 0
                                  sourceLength = 10
                              children:
                                  getConstantNode =
                                      GetConstantNodeGen
                                  lookupConstantNode =
                                      LookupConstantWithLexicalScopeNodeGen
                                          attributes:
                                              lexicalScope =  :: Object
                                              name = "FOO"
                      right =
                          WriteConstantNode
                              attributes:
                                  flags = 0
                                  name = "FOO"
                                  sourceCharIndex = 0
                                  sourceLength = 10
                              children:
                                  moduleNode =
                                      LexicalScopeNode
                                          attributes:
                                              flags = 0
                                              lexicalScope =  :: Object
                                              sourceCharIndex = -1
                                              sourceLength = 0
                                  valueNode =
                                      IntegerFixnumLiteralNode
                                          attributes:
                                              flags = 0
                                              sourceCharIndex = 8
                                              sourceLength = 2
                                              value = 42