subject: "Match"
description: "=~ operator/with Regexp literal as a LHS (without named capture groups)"
notes: >
  Is represented as a method call `/regexp/.=~(argument)`
focused_on_node: "org.truffleruby.language.dispatch.RubyCallNode"
ruby: |
  /foo/ =~ bar
ast: |
  RubyCallNode
      attributes:
          descriptor = NoKeywordArgumentsDescriptor
          dispatchConfig = PROTECTED
          emptyKeywordsProfile = false
          flags = 1
          isAttrAssign = false
          isSafeNavigation = false
          isSplatted = false
          isVCall = false
          lastArgIsNotHashProfile = false
          methodName = "=~"
          notEmptyKeywordsProfile = false
          notRuby2KeywordsHashProfile = false
          sourceCharIndex = 0
          sourceLength = 12
      children:
          arguments = [
              RubyCallNode
                  attributes:
                      descriptor = NoKeywordArgumentsDescriptor
                      dispatchConfig = PRIVATE
                      emptyKeywordsProfile = false
                      flags = 0
                      isAttrAssign = false
                      isSafeNavigation = false
                      isSplatted = false
                      isVCall = true
                      lastArgIsNotHashProfile = false
                      methodName = "bar"
                      notEmptyKeywordsProfile = false
                      notRuby2KeywordsHashProfile = false
                      sourceCharIndex = 9
                      sourceLength = 3
                  children:
                      receiver =
                          SelfNode
                              attributes:
                                  flags = 0
                                  sourceCharIndex = -1
                                  sourceLength = 0
          ]
          receiver =
              ObjectLiteralNode
                  attributes:
                      flags = 0
                      object = RubyRegexp(source = foo, options = RegexpOptions(kcode: NONE, kcodeDefault, literal), encoding = US-ASCII)
                      sourceCharIndex = 0
                      sourceLength = 5