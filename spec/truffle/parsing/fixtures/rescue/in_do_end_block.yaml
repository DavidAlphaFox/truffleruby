subject: "Rescue keyword"
description: "rescue in a do/end block"
notes: >
  Is represented with a TryNode node:
  - a block body is represented with a `tryPart` child node.
  - rescue branch is represented with a `rescueParts` child nodes.
focused_on_node: "org.truffleruby.language.methods.BlockDefinitionNode"
ruby: |
  proc do
    "foo"
  rescue
    42
  end
ast: |
  BlockDefinitionNodeGen
      attributes:
          breakID = org.truffleruby.language.control.BreakID@...
          callTargets = ProcCallTargets(callTargetForProc = block in <top (required)>, callTargetForLambda = null, altCallTargetCompiler = ...$$Lambda$.../0x...@...)
          flags = 0
          frameOnStackMarkerSlot = 2
          sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, isImplicitRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in <top (required)>, blockDepth = 1, parseName = block in <top (required)>, notes = <top (required)>, argumentDescriptors = [])
          sourceCharIndex = 5
          sourceLength = 26
          type = PROC
      call targets:
          RubyProcRootNode
              attributes:
                  callTarget = block in <top (required)>
                  frameDescriptor = FrameDescriptor@...{#0:(self)}
                  instrumentationBits = 0
                  lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                  nextProfile = false
                  polyglotRef = org.truffleruby.RubyLanguage@...
                  redoProfile = false
                  retryProfile = false
                  returnID = org.truffleruby.language.control.ReturnID@...
                  sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, isImplicitRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in <top (required)>, blockDepth = 1, parseName = block in <top (required)>, notes = <top (required)>, argumentDescriptors = [])
                  split = HEURISTIC
              children:
                  body =
                      SequenceNode
                          attributes:
                              flags = 12
                              sourceCharIndex = 5
                              sourceLength = 26
                          children:
                              body = [
                                  WriteLocalVariableNode
                                      attributes:
                                          flags = 0
                                          frameSlot = 0 # (self)
                                          sourceCharIndex = -1
                                          sourceLength = 0
                                      children:
                                          valueNode =
                                              ProfileArgumentNodeGen
                                                  attributes:
                                                      flags = 0
                                                      sourceCharIndex = -1
                                                      sourceLength = 0
                                                  children:
                                                      childNode_ =
                                                          ReadSelfNode
                                                              attributes:
                                                                  flags = 0
                                                                  sourceCharIndex = -1
                                                                  sourceLength = 0
                                  TryNodeGen
                                      attributes:
                                          flags = 0
                                          sourceCharIndex = 10
                                          sourceLength = 21
                                      children:
                                          rescueParts = [
                                              RescueStandardErrorNode
                                                  attributes:
                                                      canOmitBacktrace = true
                                                      flags = 0
                                                      sourceCharIndex = 16
                                                      sourceLength = 11
                                                  children:
                                                      rescueBody =
                                                          IntegerFixnumLiteralNode
                                                              attributes:
                                                                  flags = 1
                                                                  sourceCharIndex = 25
                                                                  sourceLength = 2
                                                                  value = 42
                                          ]
                                          tryPart =
                                              StringLiteralNode
                                                  attributes:
                                                      encoding = UTF-8
                                                      flags = 1
                                                      sourceCharIndex = 10
                                                      sourceLength = 5
                                                      tstring = foo
                              ]