subject: "END block"
description: "END { ... }"
notes: >
  Is translated into a `Truffle::KernelOperations.at_exit(false) { ... }` call.
focused_on_node: "org.truffleruby.language.control.OnceNode"
ruby: |
  END {
    1
    2
  }
ast: |
  OnceNode
      attributes:
          flags = 1
          holder = org.truffleruby.language.control.OnceNode$Holder@...
          sourceCharIndex = 0
          sourceLength = 15
      children:
          child =
              CatchBreakNode
                  attributes:
                      breakID = org.truffleruby.language.control.BreakID@...
                      flags = 0
                      isWhile = false
                      sourceCharIndex = 0
                      sourceLength = 0
                  children:
                      body =
                          FrameOnStackNode
                              attributes:
                                  flags = 0
                                  frameOnStackMarkerSlot = 2
                                  sourceCharIndex = -1
                                  sourceLength = 0
                              children:
                                  child =
                                      RubyCallNode
                                          attributes:
                                              descriptor = NoKeywordArgumentsDescriptor
                                              dispatchConfig = PROTECTED
                                              emptyKeywordsProfile = false
                                              flags = 0
                                              isAttrAssign = false
                                              isSafeNavigation = false
                                              isSplatted = false
                                              isVCall = false
                                              lastArgIsNotHashProfile = false
                                              methodName = "at_exit"
                                              notEmptyKeywordsProfile = false
                                              notRuby2KeywordsHashProfile = false
                                              sourceCharIndex = -1
                                              sourceLength = 0
                                          children:
                                              arguments = [
                                                  BooleanLiteralNode
                                                      attributes:
                                                          flags = 0
                                                          sourceCharIndex = 0
                                                          sourceLength = 0
                                                          value = false
                                              ]
                                              block =
                                                  BlockDefinitionNodeGen
                                                      attributes:
                                                          breakID = org.truffleruby.language.control.BreakID@...
                                                          callTargets = ProcCallTargets(callTargetForProc = block in <top (required)>, callTargetForLambda = null, altCallTargetCompiler = ...$$Lambda$.../0x...@...)
                                                          flags = 0
                                                          frameOnStackMarkerSlot = 2
                                                          sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, isImplicitRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in <top (required)>, blockDepth = 1, parseName = block in <top (required)>, notes = <top (required)>, argumentDescriptors = [])
                                                          sourceCharIndex = 0
                                                          sourceLength = 0
                                                          type = PROC
                                                      call targets:
                                                          RubyProcRootNode
                                                              attributes:
                                                                  callTarget = block in <top (required)>
                                                                  frameDescriptor = FrameDescriptor@...{#0:(self)}
                                                                  instrumentationBits = 0
                                                                  lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                                                                  nextProfile = false
                                                                  polyglotRef = org.truffleruby.RubyLanguage@...
                                                                  redoProfile = false
                                                                  retryProfile = false
                                                                  returnID = org.truffleruby.language.control.ReturnID@...
                                                                  sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, isImplicitRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in <top (required)>, blockDepth = 1, parseName = block in <top (required)>, notes = <top (required)>, argumentDescriptors = [])
                                                                  split = HEURISTIC
                                                              children:
                                                                  body =
                                                                      SequenceNode
                                                                          attributes:
                                                                              flags = 12
                                                                              sourceCharIndex = 0
                                                                              sourceLength = 0
                                                                          children:
                                                                              body = [
                                                                                  WriteLocalVariableNode
                                                                                      attributes:
                                                                                          flags = 0
                                                                                          frameSlot = 0 # (self)
                                                                                          sourceCharIndex = -1
                                                                                          sourceLength = 0
                                                                                      children:
                                                                                          valueNode =
                                                                                              ProfileArgumentNodeGen
                                                                                                  attributes:
                                                                                                      flags = 0
                                                                                                      sourceCharIndex = -1
                                                                                                      sourceLength = 0
                                                                                                  children:
                                                                                                      childNode_ =
                                                                                                          ReadSelfNode
                                                                                                              attributes:
                                                                                                                  flags = 0
                                                                                                                  sourceCharIndex = -1
                                                                                                                  sourceLength = 0
                                                                                  IntegerFixnumLiteralNode
                                                                                      attributes:
                                                                                          flags = 1
                                                                                          sourceCharIndex = 8
                                                                                          sourceLength = 1
                                                                                          value = 1
                                                                                  IntegerFixnumLiteralNode
                                                                                      attributes:
                                                                                          flags = 1
                                                                                          sourceCharIndex = 12
                                                                                          sourceLength = 1
                                                                                          value = 2
                                                                              ]
                                              receiver =
                                                  ReadConstantNode
                                                      attributes:
                                                          flags = 0
                                                          name = "KernelOperations"
                                                          sourceCharIndex = 0
                                                          sourceLength = 0
                                                      children:
                                                          moduleNode =
                                                              ReadConstantWithLexicalScopeNode
                                                                  attributes:
                                                                      flags = 0
                                                                      lexicalScope =  :: Object
                                                                      name = "Truffle"
                                                                      sourceCharIndex = 0
                                                                      sourceLength = 0
                                                                  children:
                                                                      getConstantNode =
                                                                          GetConstantNodeGen
                                                                      lookupConstantNode =
                                                                          LookupConstantWithLexicalScopeNodeGen
                                                                              attributes:
                                                                                  lexicalScope =  :: Object
                                                                                  name = "Truffle"