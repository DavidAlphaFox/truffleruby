subject: "Return"
description: "return operator in a lambda in a class definition body"
notes: >
  Is represented by DynamicReturnNode node
focused_on_node: "org.truffleruby.language.objects.RunModuleDefinitionNode"
ruby: |
  class Foo
    -> {
      return 42
    }
  end
ast: |
  RunModuleDefinitionNode
      attributes:
          flags = 1
          moduleBodyDefinition = ModuleBodyDefinition(name = <class:Foo>, sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: null :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, isImplicitRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = <class:Foo>, blockDepth = 0, parseName = <class:Foo>, notes = null, argumentDescriptors = null), callTarget = <class:Foo>, staticLexicalScope =  :: null :: Object, dynamicLexicalScopes = null)
          sourceCharIndex = 0
          sourceLength = 38
      children:
          callModuleDefinitionNode =
              DefaultIndirectCallNode
          definingModule =
              DefineClassNode
                  attributes:
                      flags = 0
                      name = "Foo"
                      sourceCharIndex = 0
                      sourceLength = 38
                  children:
                      lexicalParentModule =
                          LexicalScopeNode
                              attributes:
                                  flags = 0
                                  lexicalScope =  :: Object
                                  sourceCharIndex = -1
                                  sourceLength = 0
      call targets:
          RubyRootNode
              attributes:
                  callTarget = <class:Foo>
                  frameDescriptor = FrameDescriptor@...{#0:(self), #1:%$~_}
                  instrumentationBits = 0
                  lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                  polyglotRef = org.truffleruby.RubyLanguage@...
                  returnID = MODULE_BODY
                  sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: null :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, isImplicitRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = <class:Foo>, blockDepth = 0, parseName = <class:Foo>, notes = null, argumentDescriptors = null)
                  sourceSection = SourceSection(source=<parse_ast> [1:1 - 5:3], index=0, length=38, characters=class Foo\n  -> {\n    return 42\n  }\nend)
                  split = NEVER
              children:
                  body =
                      SequenceNode
                          attributes:
                              flags = 12
                              sourceCharIndex = 0
                              sourceLength = 38
                          children:
                              body = [
                                  WriteLocalVariableNode
                                      attributes:
                                          flags = 0
                                          frameSlot = 0 # (self)
                                          sourceCharIndex = -1
                                          sourceLength = 0
                                      children:
                                          valueNode =
                                              ProfileArgumentNodeGen
                                                  attributes:
                                                      flags = 0
                                                      sourceCharIndex = -1
                                                      sourceLength = 0
                                                  children:
                                                      childNode_ =
                                                          ReadSelfNode
                                                              attributes:
                                                                  flags = 0
                                                                  sourceCharIndex = -1
                                                                  sourceLength = 0
                                  InsideModuleDefinitionNode
                                      attributes:
                                          flags = 0
                                          sourceCharIndex = 0
                                          sourceLength = 38
                                      children:
                                          body =
                                              BlockDefinitionNodeGen
                                                  attributes:
                                                      breakID = org.truffleruby.language.control.BreakID@...
                                                      callTargets = ProcCallTargets(callTargetForProc = null, callTargetForLambda = block in <class:Foo>, altCallTargetCompiler = null)
                                                      flags = 1
                                                      frameOnStackMarkerSlot = -1
                                                      sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: null :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, isImplicitRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in <class:Foo>, blockDepth = 1, parseName = block in <class:Foo>, notes = <class:Foo>, argumentDescriptors = [])
                                                      sourceCharIndex = 12
                                                      sourceLength = 22
                                                      type = LAMBDA
                                                  call targets:
                                                      RubyLambdaRootNode
                                                          attributes:
                                                              arityForCheck = Arity{preRequired = 0, optional = 0, hasRest = false, isImplicitRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}
                                                              breakID = org.truffleruby.language.control.BreakID@...
                                                              callTarget = block in <class:Foo>
                                                              checkArityProfile = false
                                                              frameDescriptor = FrameDescriptor@...{#0:(self)}
                                                              instrumentationBits = 0
                                                              keywordArguments = false
                                                              localReturnProfile = false
                                                              lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                                                              matchingBreakProfile = false
                                                              matchingReturnProfile = false
                                                              nextProfile = false
                                                              nonMatchingBreakProfile = false
                                                              nonMatchingReturnProfile = false
                                                              polyglotRef = org.truffleruby.RubyLanguage@...
                                                              redoProfile = false
                                                              retryProfile = false
                                                              returnID = org.truffleruby.language.control.ReturnID@...
                                                              sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: null :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, isImplicitRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in <class:Foo>, blockDepth = 1, parseName = block in <class:Foo>, notes = <class:Foo>, argumentDescriptors = [])
                                                              sourceSection = SourceSection(source=<parse_ast> [2:3 - 4:3], index=12, length=22, characters=-> {\n    return 42\n  })
                                                              split = HEURISTIC
                                                          children:
                                                              body =
                                                                  SequenceNode
                                                                      attributes:
                                                                          flags = 12
                                                                          sourceCharIndex = 12
                                                                          sourceLength = 22
                                                                      children:
                                                                          body = [
                                                                              WriteLocalVariableNode
                                                                                  attributes:
                                                                                      flags = 0
                                                                                      frameSlot = 0 # (self)
                                                                                      sourceCharIndex = -1
                                                                                      sourceLength = 0
                                                                                  children:
                                                                                      valueNode =
                                                                                          ProfileArgumentNodeGen
                                                                                              attributes:
                                                                                                  flags = 0
                                                                                                  sourceCharIndex = -1
                                                                                                  sourceLength = 0
                                                                                              children:
                                                                                                  childNode_ =
                                                                                                      ReadSelfNode
                                                                                                          attributes:
                                                                                                              flags = 0
                                                                                                              sourceCharIndex = -1
                                                                                                              sourceLength = 0
                                                                              DynamicReturnNode
                                                                                  attributes:
                                                                                      flags = 1
                                                                                      returnID = org.truffleruby.language.control.ReturnID@...
                                                                                      sourceCharIndex = 21
                                                                                      sourceLength = 9
                                                                                  children:
                                                                                      value =
                                                                                          IntegerFixnumLiteralNode
                                                                                              attributes:
                                                                                                  flags = 0
                                                                                                  sourceCharIndex = 28
                                                                                                  sourceLength = 2
                                                                                                  value = 42
                                                                          ]
                              ]