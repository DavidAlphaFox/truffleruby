subject: "case expression"
description: "with expression to match / and `else` branch (case exp when ... else ... end)"
notes: >
  The case expression is represented with multiple nested `if`s.
  Matching in every branch is a `#===` method call (represented with InlinedCaseEqualNodeGen node).
  A case expression to match is stored in a temporary variable (frameSlot = 2 in the example).
  
  So the example below is translated to the following expression:
  
    %case_1 = 42
    if 42 === %case_1 
      "forty two"
    else 100500 === %case_1
      "one hundred five hundred"
    else
      "other"
    end
focused_on_node: "org.truffleruby.language.control.SequenceNode"
ruby: |
  case 42
  when 42
    "forty two"
  when 100500
    "one hundred five hundred"
  else
    "other"
  end
ast: |
  SequenceNode
      attributes:
          flags = 12
          sourceCharIndex = 0
          sourceLength = 89
      children:
          body = [
              WriteLocalVariableNode
                  attributes:
                      flags = 0
                      frameSlot = 0 # (self)
                      sourceCharIndex = -1
                      sourceLength = 0
                  children:
                      valueNode =
                          ProfileArgumentNodeGen
                              attributes:
                                  flags = 0
                                  sourceCharIndex = -1
                                  sourceLength = 0
                              children:
                                  childNode_ =
                                      ReadSelfNode
                                          attributes:
                                              flags = 0
                                              sourceCharIndex = -1
                                              sourceLength = 0
              WriteLocalVariableNode
                  attributes:
                      flags = 0
                      frameSlot = 2 # %case_0
                      sourceCharIndex = -1
                      sourceLength = 0
                  children:
                      valueNode =
                          IntegerFixnumLiteralNode
                              attributes:
                                  flags = 0
                                  sourceCharIndex = 5
                                  sourceLength = 2
                                  value = 42
              IfElseNodeGen
                  attributes:
                      flags = 0
                      sourceCharIndex = -1
                      sourceLength = 0
                  children:
                      condition =
                          InlinedCaseEqualNodeGen
                              attributes:
                                  assumptions = [Assumption(valid, name=set_trace_func is not used)]
                                  flags = 0
                                  integerCaseEqualAssumption = Assumption(valid, name=inlined Integer#===)
                                  parameters = RubyCallNodeParameters{methodName='===', descriptor=NoKeywordArgumentsDescriptor, isSplatted=false, ignoreVisibility=true, isVCall=false, isSafeNavigation=false, isAttrAssign=false}
                                  sourceCharIndex = -1
                                  sourceLength = 0
                              children:
                                  leftNode_ =
                                      IntegerFixnumLiteralNode
                                          attributes:
                                              flags = 0
                                              sourceCharIndex = 13
                                              sourceLength = 2
                                              value = 42
                                  rightNode_ =
                                      ReadLocalVariableNode
                                          attributes:
                                              flags = 0
                                              frameSlot = 2 # %case_0
                                              sourceCharIndex = -1
                                              sourceLength = 0
                                              type = FRAME_LOCAL
                      elseBody =
                          IfElseNodeGen
                              attributes:
                                  flags = 0
                                  sourceCharIndex = -1
                                  sourceLength = 0
                              children:
                                  condition =
                                      InlinedCaseEqualNodeGen
                                          attributes:
                                              assumptions = [Assumption(valid, name=set_trace_func is not used)]
                                              flags = 0
                                              integerCaseEqualAssumption = Assumption(valid, name=inlined Integer#===)
                                              parameters = RubyCallNodeParameters{methodName='===', descriptor=NoKeywordArgumentsDescriptor, isSplatted=false, ignoreVisibility=true, isVCall=false, isSafeNavigation=false, isAttrAssign=false}
                                              sourceCharIndex = -1
                                              sourceLength = 0
                                          children:
                                              leftNode_ =
                                                  IntegerFixnumLiteralNode
                                                      attributes:
                                                          flags = 0
                                                          sourceCharIndex = 35
                                                          sourceLength = 6
                                                          value = 100500
                                              rightNode_ =
                                                  ReadLocalVariableNode
                                                      attributes:
                                                          flags = 0
                                                          frameSlot = 2 # %case_0
                                                          sourceCharIndex = -1
                                                          sourceLength = 0
                                                          type = FRAME_LOCAL
                                  elseBody =
                                      StringLiteralNode
                                          attributes:
                                              encoding = UTF-8
                                              flags = 1
                                              sourceCharIndex = 78
                                              sourceLength = 7
                                              tstring = other
                                  thenBody =
                                      StringLiteralNode
                                          attributes:
                                              encoding = UTF-8
                                              flags = 1
                                              sourceCharIndex = 44
                                              sourceLength = 26
                                              tstring = one hundred five hundred
                      thenBody =
                          StringLiteralNode
                              attributes:
                                  encoding = UTF-8
                                  flags = 1
                                  sourceCharIndex = 18
                                  sourceLength = 11
                                  tstring = forty two
          ]